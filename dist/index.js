"use strict";import*as r from"@actions/core";import{parallelLimit as C}from"async";import{spawnSync as p}from"child_process";import{createWriteStream as x,existsSync as D,rmSync as U}from"fs";import{copy as G}from"fs-extra";import{join as d,resolve as B}from"path";import{xml2js as J}from"xml-js";import{cpuCount as N,downloadFile as w,exit as R,fixArgArr as _,isNumeric as A,readLastLines as E,resetWorkingDir as L,runCmd as T,userHomeDir as O}from"./utils";const $={spigotmc:{url:"https://hub.spigotmc.org/jenkins/job/BuildTools/lastSuccessfulBuild/artifact/target/BuildTools.jar"}},j=(r.getInput("buildToolProvider")||"SpigotMC").toLowerCase();let f=_((r.getInput("versions")||"latest").toLowerCase().split(","));const F=r.getInput("generateSrc")=="true",H=r.getInput("generateDoc")=="true",M=r.getInput("disableJavaCheck")=="true",V=r.getInput("remapped")=="true",W=r.getInput("forceRun")=="true",Y=A(r.getInput("threads"))?parseInt(r.getInput("threads")):N,c=L(),q=d(c.logs,"SpraxDev_Actions-SpigotMC.log"),k=x(q,{encoding:"utf-8",flags:"a"});async function z(){return new Promise(async(e,n)=>{try{if(f.length==0)return e({code:0,msg:"No version(s) provided to build"});if(!Object.keys($).includes(j))return n(new Error(`'${j}' is not a valid BuildTool-Provider (${Object.keys($).join(", ")})`));if(!W&&(f=await K(f,(o,a)=>{logInfo(`Skipping version '${o}' because it has been found in the local maven repository: ${a}`)}),f.length==0))return e({code:0,msg:"No new versions to build"});const t=$[j];logInfo("Installed Java-Version:"),await T("java",["-version"],c.base,k),logInfo(`
Downloading '${t.url}'...`),await w(t.url,d(c.cache,"BuildTools.jar"));const m=f.length!=1,i=["-jar","BuildTools.jar","--compile","Spigot"];F&&i.push("--generate-source"),H&&i.push("--generate-docs"),M&&i.push("--disable-java-check"),V&&i.push("--remapped");const s=[];for(const o of f)s.push(async()=>new Promise(async(a,v)=>{const u=Date.now(),h=d(c.logs,`${o}.log`);logInfo(`Building version '${o}'...`);const g=m?d(c.base,`${o}`):c.cache;m&&await G(c.cache,g);try{await T("java",[...i,"--rev",o],g,h,!0),m&&U(g,{recursive:!0});const l=Date.now();logInfo(`Finished '${o}' in ${((l-u)/6e4).toFixed(2)} minutes`),a()}catch(l){logInfo(`An error occurred while building '${o}'`),logError(l),logError(`
Printing last 30 lines from '${B(h)}':`);for(const I of E(h,30))logError(I);v(l)}}));C(s,Y,o=>{if(o)return n(o);e({code:0})})}catch(t){n(t)}})}async function K(e,n){return new Promise(async(t,m)=>{const i=[];for(const s of e){let o=!1,a=s!="latest"?s:null;try{const u=await w(`https://hub.spigotmc.org/versions/${s}.json`,null),g=(u instanceof Buffer?JSON.parse(u.toString("utf-8")):null)?.refs?.Bukkit;if(g){const l=await w(`https://hub.spigotmc.org/stash/projects/SPIGOT/repos/bukkit/raw/pom.xml?at=${g}`,null);l instanceof Buffer&&(a=J(l.toString("utf-8"),{compact:!0,ignoreComment:!0,ignoreAttributes:!0}).project?.version?._text)}}catch(u){logError(u)}const v=B(d(O,`/.m2/repository/org/spigotmc/spigot/${a}/spigot-${a}.jar`));a&&(o=D(v)),o?n(s,v):i.push(s)}t(i)})}export function logInfo(e){console.log(e),k.write(e+`
`)}export function logError(e){typeof e!="string"&&(e=JSON.stringify(e,null,2)),console.error(e),k.write(e+`
`)}let b=null,y=null;function Q(){let e=p("git",["config","--global","user.name"]);e.status==0&&(b=e.stdout.toString()),e=p("git",["config","--global","user.email"]),e.status==0&&(y=e.stdout.toString());const n=`GitHub Runner on ${process.env.GITHUB_REPOSITORY||"Unknown_Repository"} (id=${process.env.GITHUB_RUN_ID})`,t="no-reply@example.com";p("git",["config","--global","user.name",n]),p("git",["config","--global","user.email",t]),console.log(`Configured git user set to '${n} <${t}>' (was '${b} <${y}>')`)}function X(){p("git",["config","--global","user.name",b??""]),p("git",["config","--global","user.email",y??""]),console.log(`Configured git user restored to '${b??""} <${y??""}>'`)}let P=2,S;Q(),z().then(e=>{P=e.code,S=e.msg}).catch(e=>{P=1,S=e}).finally(()=>{X(),R(P,S)});
//# sourceMappingURL=index.js.map
