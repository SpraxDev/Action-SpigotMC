{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import * as core from '@actions/core';\nimport { parallelLimit } from 'async';\nimport { spawnSync } from 'child_process';\nimport { createWriteStream, existsSync, rmSync } from 'fs';\nimport { copy } from 'fs-extra';\nimport { join as joinPath, resolve as resolvePath } from 'path';\nimport { xml2js } from 'xml-js';\n\nimport {\n    cpuCount,\n    downloadFile,\n    exit,\n    fixArgArr,\n    isNumeric,\n    readLastLines,\n    resetWorkingDir,\n    runCmd,\n    userHomeDir\n} from './utils';\n\nconst supportedBuildTools: { [key: string]: { url: string } } = {\n    spigotmc: {\n        url: 'https://hub.spigotmc.org/jenkins/job/BuildTools/lastSuccessfulBuild/artifact/target/BuildTools.jar'\n    }\n};\n\n/* GitHub Actions inputs */\nconst buildToolProvider: string = (core.getInput('buildToolProvider') || 'SpigotMC').toLowerCase();\nlet versions: string[] = fixArgArr((core.getInput('versions') || 'latest').toLowerCase().split(','));\nconst generateSrc: boolean = core.getInput('generateSrc') == 'true';\nconst generateDoc: boolean = core.getInput('generateDoc') == 'true';\nconst disableJavaCheck: boolean = core.getInput('disableJavaCheck') == 'true';\nconst remapped: boolean = core.getInput('remapped') == 'true';\n\nconst forceRun: boolean = core.getInput('forceRun') == 'true';\nconst threadCount: number = isNumeric(core.getInput('threads')) ? parseInt(core.getInput('threads')) : cpuCount;\n\nconst workingDir = resetWorkingDir();\nconst appLogFile = joinPath(workingDir.logs, 'SpraxDev_Actions-SpigotMC.log');\nconst appLogStream = createWriteStream(appLogFile, {encoding: 'utf-8', flags: 'a' /* append */});\n\nasync function run(): Promise<{ code: number, msg?: string }> {\n    return new Promise(async (resolve, reject): Promise<void> => {\n        try {\n            if (versions.length == 0) return resolve({code: 0, msg: 'No version(s) provided to build'});\n\n            if (!Object.keys(supportedBuildTools).includes(buildToolProvider)) {\n                return reject(new Error(`'${buildToolProvider}' is not a valid BuildTool-Provider (${Object.keys(supportedBuildTools).join(', ')})`));\n            }\n\n            if (!forceRun) {\n                versions = await removeExistingVersions(versions, (ver, jarPath) => {\n                    logInfo(`Skipping version '${ver}' because it has been found in the local maven repository: ${jarPath}`);\n                });\n\n                if (versions.length == 0) return resolve({code: 0, msg: 'No new versions to build'});\n            }\n\n            const buildTool = supportedBuildTools[buildToolProvider];\n\n            logInfo('Installed Java-Version:');\n            await runCmd('java', ['-version'], workingDir.base, appLogStream);\n\n            logInfo(`\\nDownloading '${buildTool.url}'...`);\n            await downloadFile(buildTool.url, joinPath(workingDir.cache, 'BuildTools.jar'));\n\n            const gotTemplateDirectory = versions.length != 1;\n            const buildToolsArgs = ['-jar', 'BuildTools.jar', '--compile', 'Spigot'];\n\n            if (generateSrc) {\n                buildToolsArgs.push('--generate-source');\n            }\n\n            if (generateDoc) {\n                buildToolsArgs.push('--generate-docs');\n            }\n\n            if (disableJavaCheck) {\n                buildToolsArgs.push('--disable-java-check');\n            }\n\n            if (remapped) {\n                buildToolsArgs.push('--remapped')\n            }\n\n            const tasks = [];\n            for (const ver of versions) {\n                tasks.push(async (): Promise<void> => {\n                    return new Promise(async (resolveTask, rejectTask): Promise<void> => {\n                        const start = Date.now();\n\n                        const logFile = joinPath(workingDir.logs, `${ver}.log`);\n\n                        logInfo(`Building version '${ver}'...`);\n\n                        // If there is only one version to build, the cache directory is used instead of copying it first\n                        const versionDir = gotTemplateDirectory ? joinPath(workingDir.base, `${ver}`) : workingDir.cache;\n\n                        if (gotTemplateDirectory) {\n                            await copy(workingDir.cache, versionDir);\n                        }\n\n                        try {\n                            // set to silent because multiple builds can run at once\n                            await runCmd('java', [...buildToolsArgs, '--rev', ver], versionDir, logFile, true);\n\n                            if (gotTemplateDirectory) {\n                                rmSync(versionDir, {recursive: true}); // delete our task dir\n                            }\n\n                            const end = Date.now();\n\n                            logInfo(`Finished '${ver}' in ${((end - start) / 60_000).toFixed(2)} minutes`);\n                            resolveTask();\n                        } catch (err: any) {\n                            logInfo(`An error occurred while building '${ver}'`);\n                            logError(err);\n\n                            logError(`\\nPrinting last 30 lines from '${resolvePath(logFile)}':`);\n\n                            for (const line of readLastLines(logFile, 30)) {\n                                logError(line);\n                            }\n\n                            rejectTask(err);\n                        }\n                    });\n                });\n            }\n\n            parallelLimit(tasks, threadCount, (err) => {\n                if (err) return reject(err);\n\n                resolve({code: 0});\n            });\n        } catch (err) {\n            reject(err);\n        }\n    });\n}\n\nasync function removeExistingVersions(versionArr: string[], onExist: (ver: string, jarPath: string) => void): Promise<string[]> {\n    return new Promise(async (resolve, _reject): Promise<void> => {\n        const result = [];\n\n        for (const ver of versionArr) {\n            let skipVersion = false;\n            let versionToCheck: string | null = ver != 'latest' ? ver : null;\n\n            try {\n                const verJsonBuff = await downloadFile(`https://hub.spigotmc.org/versions/${ver}.json`, null);\n                const verJson = verJsonBuff instanceof Buffer ? JSON.parse(verJsonBuff.toString('utf-8')) : null;\n                const bukkitRef: undefined | string = verJson?.refs?.Bukkit;\n\n                if (bukkitRef) {\n                    const verPomBuff = await downloadFile(`https://hub.spigotmc.org/stash/projects/SPIGOT/repos/bukkit/raw/pom.xml?at=${bukkitRef}`, null);\n\n                    if (verPomBuff instanceof Buffer) {\n                        const result = xml2js(verPomBuff.toString('utf-8'), {\n                            compact: true,\n                            ignoreComment: true,\n                            ignoreAttributes: true\n                        }) as any;\n\n                        versionToCheck = result.project?.version?._text;\n                    }\n                }\n            } catch (err: any) {\n                logError(err);\n            }\n\n            const jarPath = resolvePath(joinPath(userHomeDir, `/.m2/repository/org/spigotmc/spigot/${versionToCheck}/spigot-${versionToCheck}.jar`));\n            if (versionToCheck) {\n                skipVersion = existsSync(jarPath);\n            }\n\n            if (skipVersion) {\n                onExist(ver, jarPath);\n            } else {\n                result.push(ver);\n            }\n        }\n\n        resolve(result);\n    });\n}\n\nexport function logInfo(msg?: string): void {\n    console.log(msg);\n    appLogStream.write(msg + '\\n');\n}\n\nexport function logError(msg?: string | object): void {\n    if (typeof msg != 'string') {\n        msg = JSON.stringify(msg, null, 2);\n    }\n\n    console.error(msg);\n    appLogStream.write(msg + '\\n');\n}\n\nlet originalGitUserName: string | null = null;\nlet originalGitUserEmail: string | null = null;\n\nfunction setGitUserAndBackupCurrent(): void {\n    let gitProcess = spawnSync('git', ['config', '--global', 'user.name']);\n    if (gitProcess.status == 0) {\n        originalGitUserName = gitProcess.stdout.toString();\n    }\n\n    gitProcess = spawnSync('git', ['config', '--global', 'user.email']);\n    if (gitProcess.status == 0) {\n        originalGitUserEmail = gitProcess.stdout.toString();\n    }\n\n    const gitUserName = `GitHub Runner on ${process.env['GITHUB_REPOSITORY'] || 'Unknown_Repository'} (id=${process.env['GITHUB_RUN_ID']})`;\n    const gitUserEmail = 'no-reply@example.com';\n    spawnSync('git', ['config', '--global', 'user.name', gitUserName]);\n    spawnSync('git', ['config', '--global', 'user.email', gitUserEmail]);\n\n    console.log(`Configured git user set to '${gitUserName} <${gitUserEmail}>' (was '${originalGitUserName} <${originalGitUserEmail}>')`);\n}\n\nfunction restoreGitUser(): void {\n    spawnSync('git', ['config', '--global', 'user.name', originalGitUserName ?? '']);\n    spawnSync('git', ['config', '--global', 'user.email', originalGitUserEmail ?? '']);\n    console.log(`Configured git user restored to '${originalGitUserName ?? ''} <${originalGitUserEmail ?? ''}>'`);\n}\n\nlet exitCode = 2;\nlet exitMessage: string | Error | undefined;\n\nsetGitUserAndBackupCurrent();\nrun()\n    .then((result) => {\n        exitCode = result.code;\n        exitMessage = result.msg;\n    })\n    .catch((err) => {\n        exitCode = 1;\n        exitMessage = err;\n    })\n    .finally(() => {\n        restoreGitUser();\n        exit(exitCode, exitMessage);\n    });\n"],
  "mappings": "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",
  "names": ["core", "parallelLimit", "spawnSync", "createWriteStream", "existsSync", "rmSync", "copy", "joinPath", "resolvePath", "xml2js", "cpuCount", "downloadFile", "exit", "fixArgArr", "isNumeric", "readLastLines", "resetWorkingDir", "runCmd", "userHomeDir", "supportedBuildTools", "buildToolProvider", "versions", "generateSrc", "generateDoc", "disableJavaCheck", "remapped", "forceRun", "threadCount", "workingDir", "appLogFile", "appLogStream", "run", "resolve", "reject", "removeExistingVersions", "ver", "jarPath", "buildTool", "gotTemplateDirectory", "buildToolsArgs", "tasks", "resolveTask", "rejectTask", "start", "logFile", "versionDir", "end", "err", "line", "versionArr", "onExist", "_reject", "result", "skipVersion", "versionToCheck", "verJsonBuff", "bukkitRef", "verPomBuff", "msg", "originalGitUserName", "originalGitUserEmail", "setGitUserAndBackupCurrent", "gitProcess", "gitUserName", "gitUserEmail", "restoreGitUser", "exitCode", "exitMessage"]
}
